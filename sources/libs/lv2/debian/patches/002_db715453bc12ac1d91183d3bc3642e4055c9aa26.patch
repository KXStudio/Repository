From db715453bc12ac1d91183d3bc3642e4055c9aa26 Mon Sep 17 00:00:00 2001
From: Reuben Thomas <reuben.thomas@me.com>
Date: Wed, 17 Feb 2021 23:32:12 +0000
Subject: [PATCH] Fix typos in docstrings

---
 lv2/atom/forge.h              | 6 +++---
 lv2/core/lv2.h                | 2 +-
 lv2/dynmanifest/dynmanifest.h | 2 +-
 lv2/event/event.h             | 2 +-
 lv2/log/logger.h              | 2 +-
 lv2/state/state.h             | 2 +-
 lv2/ui/ui.h                   | 6 +++---
 7 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/lv2/atom/forge.h b/lv2/atom/forge.h
index 714df7e5..5cf3551e 100644
--- a/lv2/atom/forge.h
+++ b/lv2/atom/forge.h
@@ -27,8 +27,8 @@
    must be popped when the container is finished.
 
    All output is written to a user-provided buffer or sink function.  This
-   makes it popssible to create create atoms on the stack, on the heap, in LV2
-   port buffers, in a ringbuffer, or elsewhere, all using the same API.
+   makes it possible to create atoms on the stack, on the heap, in LV2 port
+   buffers, in a ringbuffer, or elsewhere, all using the same API.
 
    This entire API is realtime safe if used with a buffer or a realtime safe
    sink, except lv2_atom_forge_init() which is only realtime safe if the URI
@@ -282,7 +282,7 @@ lv2_atom_forge_set_sink(LV2_Atom_Forge*            forge,
 /**
    Write raw output.  This is used internally, but is also useful for writing
    atom types not explicitly supported by the forge API.  Note the caller is
-   responsible for ensuring the output is approriately padded.
+   responsible for ensuring the output is appropriately padded.
 */
 static inline LV2_Atom_Forge_Ref
 lv2_atom_forge_raw(LV2_Atom_Forge* forge, const void* data, uint32_t size)
diff --git a/lv2/core/lv2.h b/lv2/core/lv2.h
index 783fe864..84c40a50 100644
--- a/lv2/core/lv2.h
+++ b/lv2/core/lv2.h
@@ -338,7 +338,7 @@ typedef struct LV2_Descriptor {
   void (*cleanup)(LV2_Handle instance);
 
   /**
-     Return additional plugin data defined by some extenion.
+     Return additional plugin data defined by some extension.
 
      A typical use of this facility is to return a struct containing function
      pointers to extend the LV2_Descriptor API.
diff --git a/lv2/dynmanifest/dynmanifest.h b/lv2/dynmanifest/dynmanifest.h
index 6181f71e..674577b5 100644
--- a/lv2/dynmanifest/dynmanifest.h
+++ b/lv2/dynmanifest/dynmanifest.h
@@ -84,7 +84,7 @@ lv2_dyn_manifest_open(LV2_Dyn_Manifest_Handle*  handle,
 
    <http://example.org/plugin> a lv2:Plugin .
 
-   The objects that are elegible for exposure are those that would need to be
+   The objects that are eligible for exposure are those that would need to be
    represented by a subject node in a static manifest.
 
    @param handle Dynamic manifest generator handle.
diff --git a/lv2/event/event.h b/lv2/event/event.h
index d55d5cf4..045ac124 100644
--- a/lv2/event/event.h
+++ b/lv2/event/event.h
@@ -61,7 +61,7 @@ LV2_DISABLE_DEPRECATION_WARNINGS
 
 /**
    The best Pulses Per Quarter Note for tempo-based uint32_t timestamps.
-   Equal to 2^12 * 5 * 7 * 9 * 11 * 13 * 17, which is evenly divisble
+   Equal to 2^12 * 5 * 7 * 9 * 11 * 13 * 17, which is evenly divisible
    by all integers from 1 through 18 inclusive, and powers of 2 up to 2^12.
 */
 LV2_DEPRECATED
diff --git a/lv2/log/logger.h b/lv2/log/logger.h
index e12b0eb4..d6919a2f 100644
--- a/lv2/log/logger.h
+++ b/lv2/log/logger.h
@@ -23,7 +23,7 @@
 
    Convenience API for easy logging in plugin code.  This API provides simple
    wrappers for logging from a plugin, which automatically fall back to
-   printing to stderr if host support is unavailabe.
+   printing to stderr if host support is unavailable.
 
    @{
 */
diff --git a/lv2/state/state.h b/lv2/state/state.h
index 70972d84..e526d855 100644
--- a/lv2/state/state.h
+++ b/lv2/state/state.h
@@ -76,7 +76,7 @@ typedef enum {
      Values with this flag contain no pointers or references to other areas
      of memory.  It is safe to copy POD values with a simple memcpy and store
      them for the duration of the process.  A POD value is not necessarily
-     safe to trasmit between processes or machines (for example, filenames
+     safe to transmit between processes or machines (for example, filenames
      are POD), see LV2_STATE_IS_PORTABLE for details.
 
      Implementations MUST NOT attempt to copy or serialise a non-POD value if
diff --git a/lv2/ui/ui.h b/lv2/ui/ui.h
index 61b3b54b..fb41d90d 100644
--- a/lv2/ui/ui.h
+++ b/lv2/ui/ui.h
@@ -202,7 +202,7 @@ typedef struct LV2UI_Descriptor {
 
      By default, the host should only call this function for lv2:ControlPort
      inputs.  However, the UI can request updates for other ports statically
-     with ui:portNotification or dynamicaly with ui:portSubscribe.
+     with ui:portNotification or dynamically with ui:portSubscribe.
 
      The UI MUST NOT retain any reference to `buffer` after this function
      returns, it is only valid for the duration of the call.
@@ -357,7 +357,7 @@ typedef enum {
   /**
      Completed successfully.
 
-     The host will set the parameter later if the user choses a new value.
+     The host will set the parameter later if the user chooses a new value.
   */
   LV2UI_REQUEST_VALUE_SUCCESS,
 
@@ -405,7 +405,7 @@ typedef struct {
      any parameter value.
 
      This function returns immediately, and the return value indicates
-     whether the host can fulfill the request.  The host may notify the
+     whether the host can fulfil the request.  The host may notify the
      plugin about the new parameter value, for example when a file is
      selected by the user, via the usual mechanism.  Typically, the host will
      send a message to the plugin that sets the new parameter value, and the
